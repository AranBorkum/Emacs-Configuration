* Terminal
** Setting default shell bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
* Which Key
** Which key package
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* Aliases
** backup features
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** yes no alias
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** terminal key bind
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
** rectangle
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x r i") 'string-insert-rectangle)
#+END_SRC
** ring bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC



** line numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC
** menu bar features
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1) 
#+END_SRC


** startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
* Org
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* IDO 
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name  "~/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* rainbow
** rainbow colour highlighting
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
     :ensure t
     :init (rainbow-mode 0))
 #+END_SRC
** rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
# * Autocomplete
# #+BEGIN_SRC emacs-lisp
#    (use-package company
#      :ensure t
#      :init
#      (add-hook 'after-init-hook 'global-company-mode)
#      :config
#      (setq company-idle-delay 0)
#      (setq company-minimum-prefix-length 3))


#    (with-eval-after-load 'company
#      (define-key company-active-map (kbd "M-n") nil)
#      (define-key company-active-map (kbd "M-p") nil)
#      (define-key company-active-map (kbd "C-n") #'company-select-next)
#      (define-key company-active-map (kbd "C-p") #'company-select-previous)
#      (define-key company-active-map (kbd "SPC") #'company-abort))


#    (use-package company-irony
#      :ensure t
#      :config
#      (require 'company)
#      (add-to-list 'company-backends 'company-irony))

#    (use-package irony
#      :ensure t
#      :config
#      (add-hook 'c++-mode-hook 'irony-mode)
#      (add-hook 'c-mode-hook 'irony-mode)
#      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

#    (with-eval-after-load 'company
#      (add-hook 'c++-mode-hook 'company-mode)
#      (add-hook 'c-mode-hook 'company-mode))

#    (setq irony-additional-clang-options '("-I/usr/local/Cellar/root/6.14.04_1/include/root"))
# #+END_SRC
